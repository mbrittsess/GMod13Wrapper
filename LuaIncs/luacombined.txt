"--[[This code is rather dense, obtuse, and not up to my usual documentation standards. My apologies.\n"
"Most of the explanations for what this code does, can be found within lapi.c, in the locations where\n"
"the functions are used. You're best off finding them by looking for uses of their GUID names, i.e.,\n"
"'guidUpvalues', that sort of thing.]]\n"
"local OrigRequireName, ZeroFUD, _R, UserdataGC = ...\n"
"\n"
"--List of GUIDs\n"
"local guidUpvalues     = \"{F56CF593-BBB6-4f54-8320-9B0942A85506}\"\n"
"local guidPushfString  = \"{CC38C278-8672-43a0-AFA4-9C2A90FC91B9}\"\n"
"local guidLenFunc      = \"{771DD06F-92A2-4e23-8EEC-317F7E17A3D8}\"\n"
"local guidConcatFunc   = \"{3C0C3DEF-DC94-4043-9073-4B21E10419A3}\"\n"
"local guidLessThanFunc = \"{9FFB88AB-5676-4345-85B8-B30EBB5C4CE2}\"\n"
"local guidFUDSizes     = \"{F5D2E50D-24B6-461c-8B20-A758EE8DC7C9}\"\n"
"local guidFUDMeta      = \"{16BBDBE2-B572-4d2e-AC4F-1D43FAAB1250}\"\n"
"local guidSetMTFunc    = \"{115965B1-94B1-41f9-9603-F62F37262D8D}\"\n"
"local guidLUDCache     = \"{0CC52835-A74E-4f3f-8C4A-0B41F6EE6AA3}\"\n"
"local guidLUDMeta      = \"{81410E3D-C338-4a6f-9EE1-1072A89D26BB}\"\n"
"local guidToPtrFunc    = \"{6E540BD9-836B-4419-998F-97D6E21295AA}\"\n"
"local guidLGSRefs      = \"{EF44B6B3-C150-4955-8337-5D57DEAB8303}\"\n"
"local guidUDPrepFunc   = \"{AD0D9949-2232-4505-B92C-7342216A6A8F}\"\n"
"local guidAnchMeta     = \"{54A22EA9-6E04-4fcf-9557-617756C1AC1A}\" --Not listed in gmwrapper.h, not used there\n"
"local guidUDAnchors    = \"{E98ACFD3-7ECF-45f6-B82B-8FB1F58EB601}\" --Also not listed in gmwrapper.h (but locally in lua_type() within lapi.c)\n"
"local guidFUDPtrStr    = \"{1B0A2F15-F771-44a1-9B3E-0E52F4887E3A}\" --Not listed in gmwrapper.h\n"
"\n"
"local weak_key_meta = {__mode = \"k\"}\n"
"local weak_val_meta = {__mode = \"v\"}\n"
"\n"
"--Upvalue stuff\n"
"if not _R[guidUpvalues] then _R[guidUpvalues] = setmetatable({}, weak_key_meta) end\n"
"\n"
"--lua_pushfstring()'s function\n"
"do local ins, concat, fmt, type = table.insert, table.concat, string.format, type\n"
"local actions = {\n"
"    [\"string\"]  = function(pos, value, args, strings)\n"
"        ins(strings, value)\n"
"    end;\n"
"    [\"boolean\"] = function(pos, value, args, strings)\n"
"        return\n"
"    end;\n"
"    [\"number\"]  = function(pos, value, args, strings)\n"
"        if type(args[pos-1]) == \"boolean\" then\n"
"            ins(strings, fmt(\"%d\", value))\n"
"        else\n"
"            ins(strings, fmt(\"%f\", value))\n"
"        end\n"
"    end;\n"
"}\n"
"\n"
"if not _R[guidPushfString] then _R[guidPushfString] = function(...)\n"
"    local args = {...}\n"
"    local strings = {}\n"
"    for pos, value in ipairs(args) do actions[type(value)](pos, value, args, strings) end\n"
"    \n"
"    return concat(strings)\n"
"end end end\n"
"\n"
"--Some basic operation stuff\n"
"do local concat, d_getmetatable, d_setmetatable, pcall, error = table.concat, debug.getmetatable, debug.setmetatable, pcall, error\n"
"local match, tonumber, tostring = string.match, tonumber, tostring\n"
"local function raise_without_location(msg) error(msg:match(\" (.*)$\")) end\n"
"\n"
"do local function len_func(a) return #a end\n"
"if not _R[guidLenFunc] then _R[guidLenFunc] = function(obj)\n"
"    local status, res = pcall(len_func, obj)\n"
"    return status and res or raise_without_location(res)\n"
"end end end\n"
"\n"
"do local function concat_func(a, b) return a .. b end\n"
"if not _R[guidConcatFunc] then _R[guidConcatFunc] = function(...)\n"
"    local args = {...}\n"
"    local intermediate = args[#args-1] .. args[#args]\n"
"    for i = (#args-2), 1, -1 do\n"
"        local status, res = pcall(concat_func, args[i], intermediate)\n"
"        intermediate = status and res or raise_without_location(res)\n"
"    end\n"
"    return intermediate\n"
"end end end\n"
"\n"
"do local function cmp_lt(a, b) return a < b end\n"
"if not _R[guidLessThanFunc] then _R[guidLessThanFunc] = function(obj1, obj2)\n"
"    local status, res = pcall(cmp_lt, a, b)\n"
"    return status and res or raise_without_location(res)\n"
"end end end end\n"
"\n"
"--Full Userdata stuff\n"
"if not _R[guidFUDSizes]  then _R[guidFUDSizes]  = setmetatable({}, weak_key_meta) end\n"
"do local fmt = string.format\n"
"if not _R[guidFUDMeta]   then _R[guidFUDMeta]   = {\n"
"    MetaName=\"userdata\",\n"
"    __metatable=false,\n"
"    __tostring=function(obj) return fmt(\"userdata: %s\", _R[guidFUDPtrStr][obj]) end} --Had to add a __tostring for these, as well.\n"
"end end\n"
"if not _R[guidAnchMeta]  then _R[guidAnchMeta]  = {MetaName=\"userdata_anch\", __gc=UserdataGC} end\n"
"if not _R[guidUDAnchors] then _R[guidUDAnchors] = setmetatable({}, weak_key_meta) end\n"
"if not _R[guidFUDPtrStr] then _R[guidFUDPtrStr] = setmetatable({}, weak_key_meta) end\n"
"do local setmetatable = debug.setmetatable\n"
"   local fudmeta  = _R[guidFUDMeta]\n"
"   local anchmeat = _R[guidAnchMeta]\n"
"   local rawset = rawset\n"
"if not _R[guidSetMTFunc] then _R[guidSetMTFunc] = function(obj, mt)\n"
"    if _R[guidFUDSizes][obj] then --It's a Vanillin FUD\n"
"        if mt==nil then\n"
"            setmetatable(obj, fudmeta)\n"
"        else\n"
"            setmetatable(obj, mt)\n"
"            rawset(mt, \"MetaName\", \"userdata\")\n"
"        end\n"
"    else\n"
"        setmetatable(obj, mt)\n"
"    end\n"
"end end \n"
"if not _R[guidUDPrepFunc] then _R[guidUDPrepFunc] = function(front, anch, size, ptr)\n"
"    setmetatable(front, fudmeta)\n"
"    setmetatable(anch,  anchmeta)\n"
"    _R[guidUDAnchors][anch] = front\n"
"    _R[guidFUDSizes][front] = size\n"
"    _R[guidFUDPtrStr][front]= ptr\n"
"    \n"
"    return front\n"
"end end end\n"
"\n"
"--Light Userdata stuff\n"
"if not _R[guidLUDCache] then _R[guidLUDCache] = setmetatable({}, {__mode=\"kv\"}) end\n"
"do local fmt = string.format\n"
"   local LUDCache = _R[guidLUDCache]\n"
"if not _R[guidLUDMeta] then _R[guidLUDMeta] = {\n"
"    MetaName=\"userdata\";\n"
"    __tostring=function(obj) return fmt(\"userdata: %s\", LUDCache[obj]) end;\n"
"    }\n"
"end end\n"
"\n"
"--Function for lua_topointer()\n"
"do local d_getmetatable, d_setmetatable, tonumber = debug.getmetatable, debug.setmetatable, tonumber\n"
"if not _R[guidToPtrFunc] then _R[guidToPtrFunc] = function(obj)\n"
"    local mt = d_getmetatable(obj)\n"
"    if mt then d_setmetatable(obj, nil) end\n"
"    local retval = tostring(obj):match(\"(%x+)$\")\n"
"    if mt then d_setmetatable(obj, mt) end\n"
"    return retval\n"
"end end end\n"
"\n"
"--lua_getstack() references\n"
"if not _R[guidLGSRefs] then _R[guidLGSRefs] = setmetatable({}, weak_val_meta) end\n"
"\n"
"return (\"luaopen_\"..(OrigRequireName:match(\"%-\") and OrigRequireName:match(\"%-(.*)\") or OrigRequireName):gsub(\"%.\", \"_\"))\n"